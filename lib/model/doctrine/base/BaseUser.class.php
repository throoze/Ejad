<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('User', 'doctrine');

/**
 * BaseUser
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $username
 * @property string $name
 * @property string $lastname
 * @property string $gender
 * @property string $email
 * @property string $passwd
 * @property integer $status
 * @property timestamp $lastlogin
 * @property Confirmation $Confirmation
 * @property Doctrine_Collection $Subscription
 * 
 * @method integer             getId()           Returns the current record's "id" value
 * @method string              getUsername()     Returns the current record's "username" value
 * @method string              getName()         Returns the current record's "name" value
 * @method string              getLastname()     Returns the current record's "lastname" value
 * @method string              getGender()       Returns the current record's "gender" value
 * @method string              getEmail()        Returns the current record's "email" value
 * @method string              getPasswd()       Returns the current record's "passwd" value
 * @method integer             getStatus()       Returns the current record's "status" value
 * @method timestamp           getLastlogin()    Returns the current record's "lastlogin" value
 * @method Confirmation        getConfirmation() Returns the current record's "Confirmation" value
 * @method Doctrine_Collection getSubscription() Returns the current record's "Subscription" collection
 * @method User                setId()           Sets the current record's "id" value
 * @method User                setUsername()     Sets the current record's "username" value
 * @method User                setName()         Sets the current record's "name" value
 * @method User                setLastname()     Sets the current record's "lastname" value
 * @method User                setGender()       Sets the current record's "gender" value
 * @method User                setEmail()        Sets the current record's "email" value
 * @method User                setPasswd()       Sets the current record's "passwd" value
 * @method User                setStatus()       Sets the current record's "status" value
 * @method User                setLastlogin()    Sets the current record's "lastlogin" value
 * @method User                setConfirmation() Sets the current record's "Confirmation" value
 * @method User                setSubscription() Sets the current record's "Subscription" collection
 * 
 * @package    Ejad
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseUser extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('User');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('username', 'string', 50, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 50,
             ));
        $this->hasColumn('name', 'string', 50, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 50,
             ));
        $this->hasColumn('lastname', 'string', 50, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 50,
             ));
        $this->hasColumn('gender', 'string', 1, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('email', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('passwd', 'string', 128, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 128,
             ));
        $this->hasColumn('status', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('lastlogin', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));


        $this->index('usrname_unique', array(
             'fields' => 
             array(
              'username' => 
              array(
              'sorting' => 'ASC',
              ),
             ),
             'type' => 'unique',
             ));
        $this->index('emailIdx', array(
             'fields' => 
             array(
              'email' => 
              array(
              'sorting' => 'ASC',
              ),
             ),
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Confirmation', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('Subscription', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             ));
        $this->actAs($timestampable0);
    }
}